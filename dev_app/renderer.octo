pipeline main(position: vec4, normal: vec4, albedo: vec4) -> (vec4)
with {
    camera_pos: vec3,
    lightDir: vec3,
    lightColor: vec3,
    view_size: vec2,
}
{

    let ambient = lightColor * vec3(0.3, 0.3, 0.3);

    let ret_color = ambient;

    let norm = normalize(normal.xyz);
    let dir = normalize(lightDir);
    let diff = max(dot(norm, dir), 0.0);
    let diffuse = lightColor * vec3(diff, diff, diff);

    let rc=(ret_color + diffuse) * albedo.rgb;

    let a = normal.xyz;
    let b = view_size;

    let g_x = shift(a, vec2(-1.0, 1.0)/b) + shift(a, vec2(-1.0, 0.0)/b) * 2.0 + shift(a, vec2(-1.0, -1.0)/b);
    g_x = g_x - shift(a, vec2(1.0, 1.0)/b) - shift(a, vec2(1.0, 0.0)/b) * 2.0 - shift(a, vec2(1.0, -1.0)/b);
    let g_y = shift(a, vec2(-1.0, -1.0)/b) + shift(a, vec2(0.0, -1.0)/b) * 2.0 + shift(a, vec2(1.0, -1.0)/b);
    g_y = g_y - shift(a, vec2(-1.0, 1.0)/b) - shift(a, vec2(0.0, 1.0)/b) * 2.0 - shift(a, vec2(1.0, 1.0)/b);

    a = sqrt(g_x*g_x + g_y * g_y);
    let final_sobel = round(length(a));
    rc = rc * (1.0 - final_sobel);

    //return vec4(final_sobel, final_sobel, final_sobel, 1.0);
    //return position;
    return vec4(rc.x, rc.y, rc.z, 1.0);

}
